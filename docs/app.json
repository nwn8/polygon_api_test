[{"name": "app.py", "content": "import prices\nimport pickle\nfrom shiny import reactive, render\nfrom shiny.express import ui\n\n\n\n\n\n# ------------------------------------------------\n# This refreshes the page\n# ------------------------------------------------\n\n\nUPDATE_INTERVAL_SECS: int = 120\n\n@reactive.calc()\ndef reactive_calc_combined():\n\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # call the methods to get the data\n    aapl_price=prices.get_aapl_price()\n\n    \"\"\"\n    with open(\"aapl_log.pkl\",\"rb\") as file2:\n         a=pickle.load(file2)\n\n    a_latest=a[-1]\n    \"\"\"\n\n    nvda_price=prices.get_nvda_price()\n\n    \"\"\"\n    with open(\"nvda_log.pkl\",\"rb\") as filer:\n        n=pickle.load(filer)\n\n    n_latest=n[-1]\n    \"\"\"\n    # Get a timestamp for \"now\" and use string format strftime() method to format it\n    #timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    latest_dictionary_entry = {\"aapl\": aapl_price, \"nvda\": nvda_price}\n\n    # Return everything we need (nothing to return)\n    return latest_dictionary_entry\n\n\n\n\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Page Options\n# ------------------------------------------------\n\n\nui.page_opts(title=\"Stock Price Page Live\", fillable=True)\n\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Sidebar\n# ------------------------------------------------\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Stock prices\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time stock quotes.\",\n        class_=\"text-center\",\n    )\n\n\n#---------------------------------------------------------------------\n# In Shiny Express, everything not in the sidebar is in the main panel\n#---------------------------------------------------------------------\n\n\nui.h2(\"Current AAPL\")\n\n@render.text\ndef display_aapl():\n    \"\"\"Get the latest reading\"\"\"\n    latest_entry = reactive_calc_combined()\n    return f\"{latest_entry['aapl']}\"\n\n\n\n\nui.hr()\n\nui.h2(\"Current NVDA\")\n\n@render.text\ndef display_nvda():\n    \"\"\"Get the latest reading\"\"\"\n    latest_entry_n = reactive_calc_combined()\n    return f\"{latest_entry_n['nvda']}\"\n", "type": "text"}, {"name": "prices.py", "content": "\nimport requests\n#from dotenv import load_dotenv\nimport pickle\n\n#load_dotenv()\n\n#api_key=os.getenv(\"NEW_API_KEY\")\n\ndef get_aapl_price():\n    url=f\"https://api.twelvedata.com/price?symbol=AAPL&apikey=6bf3bdff97a14db19bdea24ba1900629\"\n    response = requests.get(url)\n\n    #print(f\"Status Code: {response.status_code}\")\n    #print(f\"Response Body: {response.json()}\")\n\n    price_aapl=response.json()\n \n    \"\"\"\n    The following is to create a list of ongoing prices saved as a pickle file\n\n    price_aa=round(float(price_aapl['price']),2)\n    with open(\"aapl_log.pkl\",\"rb\") as file2:\n         a=pickle.load(file2)\n\n    \n    a.append(price_aa)\n    \n    with open(\"aapl_log.pkl\", \"wb\") as file:\n        pickle.dump(a, file)\n\n    \"\"\"\n    print(price_aapl)\n    return price_aapl['price']\n\ndef get_nvda_price():\n    url=f\"https://api.twelvedata.com/price?symbol=nvda&apikey=6bf3bdff97a14db19bdea24ba1900629\"\n    response = requests.get(url)\n\n    #print(f\"Status Code: {response.status_code}\")\n    #print(f\"Response Body: {response.json()}\")\n\n    price_nvda=response.json()\n\n    \"\"\"\n    The following is to create and read a list as a pickle file for ongoing prices\n\n    price_nn=round(float(price_nvda['price']),2)\n    with open(\"nvda_log.pkl\",\"rb\") as filer:\n         x=pickle.load(filer)\n\n    x.append(price_nn)\n    \n\n    with open(\"nvda_log.pkl\", \"wb\") as file:\n        pickle.dump(x, file)\n    \"\"\"\n\n\n    return price_nvda['price']\n\nget_aapl_price()\nget_nvda_price()", "type": "text"}]