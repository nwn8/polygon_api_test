# requirements.txt - list all the packages the project needs
#
# In this file, ignore hashes (#) - they are just used to create comments.
# Lines starting with a hash are ignored when installing packages using this file. 

# ======================================================
# IMPORTANT: The contents of this file varies by project 
# ======================================================

# Some common dependencies are provided in this example.
# Comment them in or out as you need them.

# ======================================================
# STEP A - CREATE A LOCAL PROJECT VIRTUAL ENV (.venv)
# ======================================================

# Create your local project virtual environment
# This step ensures you have an isolated Python environment for your project.
# This is typically just done once at the beginning of a project.
# If it gets messed up, we can delete .venv and recreate it at any time. 

# Run the following command to create a virtual environment in the project root.
### On Windows, Use PowerShell (not cmd) - don't include the #:
# py -m venv .venv

### On Mac/Linux, Use zsh or bash (or PowerShell) - don't include the #:
# python3 -m venv .venv

### If VS Code asks: We noticed a new environment has been created. 
# Do you want to select it for the workspace folder?
# Click Yes. 

# ======================================================
# STEP A (ADVANCED OPTION) - ONLY USE IF REQUIRED
# ======================================================

### IMPORTANT: 
### If the project requires a large tool like Apache Kafka or Spark,
### we may need to install an earlier version of Python
### and specify the required version when we create the virtual environment. 
### On Windows, Use PowerShell (not cmd) - don't include the #:
# py -3.11 -m venv .venv
### On Mac/Linux, Use zsh or bash (or PowerShell) - don't include the #:
# python3 -3.11 -m venv .venv

# ======================================================
# STEP B - ALWAYS ACTIVATE THE (.venv) WHEN OPENING A NEW TERMINAL
# ======================================================

# ALWAYS activate the .venv before working on the project.
# Activate whenever you open a new terminal. 

### Windows PowerShell Command (don't include the #):
# .\.venv\Scripts\activate

### Mac/Linux Command (don't include the #):
# source .venv/bin/activate

# Verify: When active, you can usually see (.venv) in the terminal.

# If using a Jupyter notebook, select the kernel associated with your project (.venv).

# ======================================================
# STEP C - INSTALL PACKAGES INTO (.venv) AS NEEDED
# ======================================================

# Install necessary packages listed below with this command:
# Keep packages updated with the most recent versions.

# When you identify a new package you want to use, 
# Just update the list below and re-run this command. 

### Windows Command (don't include the #):
# py -m pip install --upgrade pip setuptools wheel
# py -m pip install -r requirements.txt

### Mac/Linux Command (don't include the #):
# python3 -m pip install --upgrade pip setuptools wheel
# python3 -m pip install --upgrade -r requirements.txt

# When you identify a new package you want to use, 
# Just update the list below and re-run the install command. 

#faicons
#palmerpenguins
pandas
#pyarrow
#plotly
#seaborn
shiny
shinylive
shinywidgets
requests
python-dotenv



# to run shiny app locally

# shiny run --reload --launch-browser dashboard/app.py



# To work in Github Pages

#We will build the app to the docs folder of our repository and test it locally.  

#With your project virtual environment active in the terminal and the necessary packages installed into our .venv project virtual environment,
 #remove any existing assets and use
 #shinylive export to build the app in the  dashboard folder to the docs folder:

# shiny static-assets remove
# shinylive export dashboard docs


#After the app is built, serve the app locally from the docs folder to test before publishing to GitHub Pages.

#In the terminal, run the following command from the root of the project folder with the project virtual environment active:

# py -m http.server --directory docs --bind localhost 8008


#Open a browser (tested with Chrome, recommended) and navigate to http://localhost:8008 Links to an external site. 
#- or whatever URL it tells you - to view the web app in the docs folder running locally. 
 #If you make changes, refresh the page a couple times or open in an incognito tab 
 # browsers cache (store) content for performance and changes won't always be reflected immediately. 
